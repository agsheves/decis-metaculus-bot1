name: Forecast on new AI tournament questions

on:
  workflow_dispatch:
  schedule:
    - cron: "*/30 * * * *" # runs every 30 minutes. Make sure to skip already forecasted questions!

# Add concurrency group to prevent parallel runs
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false


# Daily job to run the simple forecast bot
jobs:
  daily_build:
    runs-on: ubuntu-latest # determines the machine that will run the job - keep as is
    steps: # sets up the steps that will be run in order
      # setup repository with all necessary dependencies - keep as is
      - name: Check out repository
        uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      
      # Setup git for logs
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      # Create logs directory
      - name: Create logs directory
        run: mkdir -p logs
      
      # Run bot
      - name: Run bot
        run: |
          poetry run python main.py
        env:
          METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
          EXA_API_KEY: ${{ secrets.EXA_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ASKNEWS_CLIENT_ID: ${{ secrets.ASKNEWS_CLIENT_ID }}
          ASKNEWS_SECRET: ${{ secrets.ASKNEWS_SECRET }}
      
      # Verify logs were created
      - name: Verify logs
        run: |
          if [ ! -d "logs" ]; then
            echo "Error: logs directory not created"
            exit 1
          fi
          
          LOG_COUNT=$(ls logs/*.log 2>/dev/null | wc -l)
          if [ $LOG_COUNT -eq 0 ]; then
            echo "Error: No log files created"
            exit 1
          fi
          
          echo "Log files created successfully"
      
      # Commit and push logs
      - name: Commit and push logs
        run: |
          git add logs/
          git commit -m "Update tournament logs [skip ci]" || echo "No changes to commit"
          git push origin main